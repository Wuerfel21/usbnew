CON
_CLKFREQ = 252_000_000

  vgaBase =  32
  vgaVsync = vgaBase + 4


OBJ
text: "vga/p2textdrv"
usb: "usbnew" | HAVE_HIDPAD = true, HAVE_MOUSE = true, KEYQUEUE_SIZE = 32

VAR
byte keyboard_testbuf[40],_zero

PUB main() | tmp

bytefill(@keyboard_testbuf," ",40)
text.initVga(-1,vgaBase,vgaVsync,0,text.VGA)
text.setTextColours($F,$1)
text.clear()
usb.start()
usb.mouse_set_limits(640-1,480-1)
usb.mouse_set_outptr(text.getDisplay() + 7*4)
byte[text.getRegion()][5] |= 128 ' enable mouse cursor (in awful way)
long[text.getRegion()][9] := ($04<<24) | @mouse4bpp

text.printStr(@"USB HID test")


repeat
  text.setTextPos(1,0)
  printraw(@"Raw Keyboard: ",usb.get_keyboard_raw_buffer(),8)
  repeat while tmp := scan2ascii(usb.get_key())
    bytemove(@keyboard_testbuf,@keyboard_testbuf+1,39)
    keyboard_testbuf[39] := tmp
  text.printStr(@"Keyboard buffer: ")
  text.printStr(@keyboard_testbuf)
  text.tx((getct()&$04000000) ? "|" : " ")
  text.nl()
  text.printStr(@"Enter key: ")
  if usb.keystate(usb.KEY_ENTER)
    text.printStr(@"DOWN")
  else
    text.printStr(@"UP")
  text.nl()
  print_mouse()
  print_hidpad(0)
  text.nl()
  print_hidpad(1)
  text.nl()
  print_hidpad(2)
  text.nl()
  print_hidpad(3)
  text.nl()

PRI printraw(name,ptr,size)
  text.printStr(name)
  repeat size
    text.hex(byte[ptr++],2)
    text.tx(" ")
  text.nl()

PRI feik_tab(size) | col
  repeat
    text.txRaw(" ")
    _,col := text.getTextPos()
    ifnot col//size
      quit

PRI print_mouse | x,y,z
  x,y,z := usb.mouse_xyz()
  text.printStr(@"Mouse:")
  text.bin(usb.mouse_buttons(),3)
  feik_tab(12)
  text.printStr(@"X: ")
  text.dec(x)
  feik_tab(12)
  text.printStr(@"Y: ")
  text.dec(y)
  feik_tab(12)
  text.printStr(@"Z: ")
  text.dec(z)

  text.nl()


PRI print_hidpad(num) | id, caps, i
  id := usb.hidpad_id(num)
  caps := usb.hidpad_getcaps(num)
  text.setTextColours(id ? $F : $8,$1)
  text.printStr(@"HIDpad ")
  text.dec(num)
  text.printStr(@" : ID ")
  text.hex(id,8)
  text.printStr(@" -- ")
  text.dec(caps.[7..0])
  text.printStr(@" buttons, ")
  text.dec(caps.[11..8])
  text.printStr(@" axes, ")
  text.dec(caps.[15..12])
  text.printStr(@" hats.")
  text.nl()
  feik_tab(8)
  text.printStr(@"Buttons: ")
  text.bin(usb.hidpad_buttons(num),caps.[7..0])
  text.nl()
  feik_tab(12)
  text.printStr(@"X : ")
  if caps.[16]
    text.dec(usb.hidpad_axis(num,0))
  else
    text.printStr(@"N/A")
  feik_tab(12)
  text.printStr(@"Y : ")
  if caps.[17]
    text.dec(usb.hidpad_axis(num,1))
  else
    text.printStr(@"N/A")
  feik_tab(12)
  text.printStr(@"Z : ")
  if caps.[18]
    text.dec(usb.hidpad_axis(num,2))
  else
    text.printStr(@"N/A")
  text.nl()
  feik_tab(12)
  text.printStr(@"RX: ")
  if caps.[19]
    text.dec(usb.hidpad_axis(num,3))
  else
    text.printStr(@"N/A")
  feik_tab(12)
  text.printStr(@"RY: ")
  if caps.[20]
    text.dec(usb.hidpad_axis(num,4))
  else
    text.printStr(@"N/A")
  feik_tab(12)
  text.printStr(@"RZ: ")
  if caps.[21]
    text.dec(usb.hidpad_axis(num,5))
  else
    text.printStr(@"N/A")
  text.nl()
  feik_tab(8)
  text.printStr(@"Hats: ")
  if caps.[15..12]
    repeat i from 0 to caps.[15..12]-1
      text.hex(usb.hidpad_hat(num,i),2)
      text.tx(" ")


  
  text.nl()
  text.setTextColours($F,$1)

PUB scan2ascii(event) : r | shifted,scancode
if event <= 0
  return 0 ' No event or release event
shifted := event.[8+1] || event.[8+5]
scancode := event&255
case scancode
  usb.KEY_A..usb.KEY_Z:
    if shifted
      return (scancode - usb.KEY_A) + "A"
    else
      return (scancode - usb.KEY_A) + "a"
  usb.KEY_1..usb.KEY_0:
    if shifted
      return lookupz(scancode-usb.KEY_1 : "!","@","#","$","%","^","&","*","(",")")
    elseif scancode == usb.KEY_0
      return "0"
    else
      return (scancode - usb.KEY_1) + "1"
  usb.KEY_SPACE: return " "
  usb.KEY_NUM0: return "0"
  usb.KEY_NUM1..usb.KEY_NUM9: return (scancode - usb.KEY_NUM1) + "1"
  other:
    return 0


DAT
mouse4bpp   long    %0000_0000_0001_0000, $000f0000, $00000000
            long    %0000_0000_0011_1000, $00f0f000, $00000000
            long    %0000_0000_0111_1000, $0f00f000, $00000000
            long    %0000_0001_1111_1000, $ff00f000, $0000000f
            long    %0000_1111_1111_1000, $0f00f000, $0000fff0
            long    %0011_1111_1111_1011, $0f00f0ff, $00ff00f0
            long    %0111_1111_1111_1111, $0f00ff0f, $0f0f00f0
            long    %1111_1111_1111_1110, $0000f0f0, $f00f0000
            long    %1111_1111_1111_1110, $0000f0f0, $f0000000
            long    %1111_1111_1111_1100, $00000f00, $f0000000
            long    %1111_1111_1111_1100, $00000f00, $f0000000
            long    %0111_1111_1111_1000, $0000f000, $0f000000
            long    %0111_1111_1111_1000, $0000f000, $0f000000
            long    %0111_1111_1111_0000, $000f0000, $0f000000
            long    %0011_1111_1111_0000, $000f0000, $00f00000
            long    %0011_1111_1111_0000, $ffff0000, $00ffffff











