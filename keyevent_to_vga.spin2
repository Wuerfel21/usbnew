CON
_CLKFREQ = 252_000_000

  vgaBase =  32
  vgaVsync = vgaBase + 4


OBJ
text: "vga/p2textdrv"
usb: "usbnew" | HAVE_MOUSE = true, KEYQUEUE_SIZE = 32

VAR

PUB main() | tmp

text.initVga(-1,vgaBase,vgaVsync,0,text.VGA)
text.setTextColours($F,$1)
text.clear()
usb.start()
usb.mouse_set_limits(640-1,480-1)
usb.mouse_set_outptr(text.getDisplay() + 7*4)
byte[text.getRegion()][5] |= 128 ' enable mouse cursor (in awful way)
long[text.getRegion()][9] := ($04<<24) | @mouse4bpp

text.printStr(@"USB Key Queue test")
text.nl()
text.setCursor(text.FLASHING_BLOCK,15)


repeat
  if tmp := usb.get_key()
    text.hex(tmp,8)
    text.txRaw(" ")
    text.dec(usb.keyq_tail)
    if tmp := scan2ascii(tmp)
      text.txRaw(" ")
      text.txRaw(tmp)
    text.nl()

PUB scan2ascii(event) : r | shifted,scancode
if event <= 0
  return 0 ' No event or release event
shifted := event.[8+1] || event.[8+5]
scancode := event&255
case scancode
  usb.KEY_A..usb.KEY_Z:
    if shifted
      return (scancode - usb.KEY_A) + "A"
    else
      return (scancode - usb.KEY_A) + "a"
  usb.KEY_1..usb.KEY_0:
    if shifted
      return lookupz(scancode-usb.KEY_1 : "!","@","#","$","%","^","&","*","(",")")
    elseif scancode == usb.KEY_0
      return "0"
    else
      return (scancode - usb.KEY_1) + "1"
  usb.KEY_SPACE: return " "
  usb.KEY_NUM0: return "0"
  usb.KEY_NUM1..usb.KEY_NUM9: return (scancode - usb.KEY_NUM1) + "1"
  other:
    return 0


DAT
mouse4bpp   long    %0000_0000_0001_0000, $000f0000, $00000000
            long    %0000_0000_0011_1000, $00f0f000, $00000000
            long    %0000_0000_0111_1000, $0f00f000, $00000000
            long    %0000_0001_1111_1000, $ff00f000, $0000000f
            long    %0000_1111_1111_1000, $0f00f000, $0000fff0
            long    %0011_1111_1111_1011, $0f00f0ff, $00ff00f0
            long    %0111_1111_1111_1111, $0f00ff0f, $0f0f00f0
            long    %1111_1111_1111_1110, $0000f0f0, $f00f0000
            long    %1111_1111_1111_1110, $0000f0f0, $f0000000
            long    %1111_1111_1111_1100, $00000f00, $f0000000
            long    %1111_1111_1111_1100, $00000f00, $f0000000
            long    %0111_1111_1111_1000, $0000f000, $0f000000
            long    %0111_1111_1111_1000, $0000f000, $0f000000
            long    %0111_1111_1111_0000, $000f0000, $0f000000
            long    %0011_1111_1111_0000, $000f0000, $00f00000
            long    %0011_1111_1111_0000, $ffff0000, $00ffffff











